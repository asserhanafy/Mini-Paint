package frontend;

import backend.*;
import java.awt.Color;
import java.awt.Point;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.Map;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

public class MainWindow extends javax.swing.JFrame {

    private Panel canvas;
    private MiniPaint paint;
    private int circleCount, lineCount, squareCount, rectangleCount;

    public MainWindow() {
        initComponents();
        paint = new MiniPaint();
        canvas = new Panel(paint);
        canvas.setSize(canvasPanel.getSize());
        canvas.setBackground(Color.WHITE);
        canvasPanel.add(canvas);
        circleCount = lineCount = squareCount = rectangleCount = 1;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        circle = new javax.swing.JButton();
        line = new javax.swing.JButton();
        square = new javax.swing.JButton();
        rectangle = new javax.swing.JButton();
        colorize = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        menu = new javax.swing.JComboBox<>();
        selectShapeLabel = new javax.swing.JLabel();
        canvasPanel = new javax.swing.JPanel();
        move = new javax.swing.JButton();
        save = new javax.swing.JButton();
        load = new javax.swing.JButton();
        resize = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Vector Drawing Application");
        setResizable(false);

        circle.setText("Circle");
        circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                circleActionPerformed(evt);
            }
        });

        line.setText("LineSegment");
        line.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lineActionPerformed(evt);
            }
        });

        square.setText("Square");
        square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                squareActionPerformed(evt);
            }
        });

        rectangle.setText("Rectangle");
        rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rectangleActionPerformed(evt);
            }
        });

        colorize.setText("Colorize");
        colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuActionPerformed(evt);
            }
        });

        selectShapeLabel.setText("Select Shape");

        canvasPanel.setPreferredSize(new java.awt.Dimension(0, 250));

        javax.swing.GroupLayout canvasPanelLayout = new javax.swing.GroupLayout(canvasPanel);
        canvasPanel.setLayout(canvasPanelLayout);
        canvasPanelLayout.setHorizontalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 425, Short.MAX_VALUE)
        );
        canvasPanelLayout.setVerticalGroup(
            canvasPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 250, Short.MAX_VALUE)
        );

        move.setText("Move");
        move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveActionPerformed(evt);
            }
        });

        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        resize.setText("Resize");
        resize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(menu, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selectShapeLabel)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(save)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(load)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(colorize)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(delete))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(resize)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(move)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(circle)
                        .addGap(18, 18, 18)
                        .addComponent(line)
                        .addGap(18, 18, 18)
                        .addComponent(square)
                        .addGap(18, 18, 18)
                        .addComponent(rectangle)
                        .addGap(16, 16, 16))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(canvasPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 425, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(circle)
                    .addComponent(line)
                    .addComponent(square)
                    .addComponent(rectangle))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(save)
                            .addComponent(load))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(selectShapeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(menu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(colorize)
                            .addComponent(delete))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(move)
                            .addComponent(resize))
                        .addGap(21, 21, 21))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(canvasPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void colorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeActionPerformed
        Shape[] shapes = paint.getShapes();
        if (shapes.length != 0) {
            int index = menu.getSelectedIndex();
            Shape shape = shapes[index];
            Color color = JColorChooser.showDialog(this, "Select a color", Color.white);
            if (shape instanceof Line) {
                shape.setColor(color);
            }
            shape.setFillColor(color);
//            paint.refresh(canvas.getGraphics());
        }
        canvas.repaint();
    }//GEN-LAST:event_colorizeActionPerformed

    private void circleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_circleActionPerformed
        CirclePropertiesWindow window = new CirclePropertiesWindow(canvas, paint);
        window.setVisible(true);
        if (window.isSuccessful()) {
            menu.addItem("circle" + circleCount++);
            menu.setSelectedIndex(paint.getShapes().length - 1);
        }
        canvas.repaint();
    }//GEN-LAST:event_circleActionPerformed

    private void lineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lineActionPerformed
        LinePropertiesWindow window = new LinePropertiesWindow(canvas, paint);
        window.setVisible(true);
        if (window.isSuccessful()) {
            menu.addItem("line" + lineCount++);
            menu.setSelectedIndex(paint.getShapes().length - 1);
        }
        canvas.repaint();
    }//GEN-LAST:event_lineActionPerformed

    private void squareActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_squareActionPerformed
        SquarePropertiesWindow window = new SquarePropertiesWindow(canvas, paint);
        window.setVisible(true);
        if (window.isSuccessful()) {
            menu.addItem("square" + squareCount++);
            menu.setSelectedIndex(paint.getShapes().length - 1);
        }
        canvas.repaint();
    }//GEN-LAST:event_squareActionPerformed

    private void rectangleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rectangleActionPerformed
        RectanglePropertiesWindow window = new RectanglePropertiesWindow(canvas, paint);
        window.setVisible(true);
        if (window.isSuccessful()) {
            menu.addItem("rectangle" + rectangleCount++);
            menu.setSelectedIndex(paint.getShapes().length - 1);
        }
        canvas.repaint();
    }//GEN-LAST:event_rectangleActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        Shape[] shapes = paint.getShapes();
        if (shapes.length != 0) {
            int index = menu.getSelectedIndex();
            Shape shape = shapes[index];
            paint.removeShape(shape);
            canvas.getGraphics().clearRect(0, 0, canvas.getWidth(), canvas.getHeight());
            menu.removeItemAt(menu.getSelectedIndex());
        }
        canvas.repaint();
    }//GEN-LAST:event_deleteActionPerformed

    private void menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_menuActionPerformed

    private void moveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveActionPerformed
        Shape[] shapes = paint.getShapes();
        if (shapes.length != 0) {
            int index = menu.getSelectedIndex();
            new MoveWindow(canvas, paint, index).setVisible(true);
        }
        canvas.repaint();
    }//GEN-LAST:event_moveActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        Shape[] shapes = paint.getShapes();
        if (shapes.length != 0) {
            JFileChooser fileChooser = new JFileChooser(new File("C:\\Users\\Asser Hanafy\\Documents\\NetBeansProjects\\Lab8\\"));
            int r = fileChooser.showSaveDialog(null);
            if (r == JFileChooser.APPROVE_OPTION) {
                File file = fileChooser.getSelectedFile();
                String filePath = file.getAbsolutePath();
                if (!filePath.toLowerCase().endsWith(".txt")) {
                    filePath += ".txt";
                }
                saveToFile(filePath);
            }
        }
    }//GEN-LAST:event_saveActionPerformed

    private void saveToFile(String filePath) {
        Shape[] shapes = paint.getShapes();
        try {
            BufferedWriter writer = new BufferedWriter(new FileWriter(filePath));
            String line = new String();
            for (Shape shape : shapes) {
                if (shape instanceof Line) {
                    line = "Line,";
                    Point start = ((Line) shape).getPosition();
                    Point end = ((Line) shape).getEndPoint();
                    line += start.x + "," + start.y + "," + end.x + "," + end.y + ",";
                    line += shape.getColor().getRGB();
                } else {
                    if (shape instanceof Circle) {
                        line = "Circle," + shape.getProperties().get("radius") + ",";
                    } else if (shape instanceof Square) {
                        line = "Square," + shape.getProperties().get("length") + ",";
                    } else if (shape instanceof Rectangle) {
                        line = "Rectangle," + shape.getProperties().get("length") + "," + shape.getProperties().get("width") + ",";
                    }
                    Point position = shape.getPosition();
                    line += position.x + "," + position.y + ",";
                    line += shape.getColor().getRGB() + ",";
                    if (shape.getFillColor() != null) {
                        line += shape.getFillColor().getRGB();
                    } else {
                        line += "null";
                    }
                }
                writer.write(line);
                writer.newLine();
            }
            writer.close();
            JOptionPane.showMessageDialog(null, "Shapes saved successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error saving to file\nPlease try again later\nError: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        canvas.repaint();
    }

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed
        JFileChooser fileChooser = new JFileChooser(new File("C:\\Users\\Asser Hanafy\\Documents\\NetBeansProjects\\Lab8\\"));
        int r = fileChooser.showOpenDialog(null);
        if (r == JFileChooser.APPROVE_OPTION) {
            File file = fileChooser.getSelectedFile();
            String filePath = file.getAbsolutePath();
            if (!filePath.toLowerCase().endsWith(".txt")) {
                filePath += ".txt";
            }
            loadFromFile(filePath);
        }
        canvas.repaint();
    }//GEN-LAST:event_loadActionPerformed

    private void loadFromFile(String filePath) {
        Shape[] shapes = paint.getShapes();
        try {
            BufferedReader reader = new BufferedReader(new FileReader(filePath));
            menu.removeAllItems();
            for (Shape shape : shapes) {
                paint.removeShape(shape);
            }
            circleCount = lineCount = squareCount = rectangleCount = 1;
            String line;
            while ((line = reader.readLine()) != null) {
                String[] data = line.split(",");
                String shapeName = data[0];
                if (shapeName.equals("Line")) {
                    Point startPoint = new Point(Integer.parseInt(data[1]), Integer.parseInt(data[2]));
                    Point endPoint = new Point(Integer.parseInt(data[3]), Integer.parseInt(data[4]));
                    Color color = new Color(Integer.parseInt(data[5]));
                    Line Line = new Line(startPoint, endPoint);
                    Line.setPosition(startPoint);
                    Line.setColor(color);
                    paint.addShape(Line);
                    menu.addItem("line" + lineCount++);
                } else if (shapeName.equals("Circle")) {
                    double radius = Double.parseDouble(data[1]);
                    Point position = new Point(Integer.parseInt(data[2]), Integer.parseInt(data[3]));
                    Color color = new Color(Integer.parseInt(data[4]));
                    Color fillColor;
                    if (!(data[5].equals("null"))) {
                        fillColor = new Color(Integer.parseInt(data[5]));
                    } else {
                        fillColor = null;
                    }
                    Circle circle = new Circle(radius);
                    circle.setPosition(position);
                    circle.setProperties(Map.of("radius", radius));
                    circle.setColor(color);
                    circle.setFillColor(fillColor);
                    paint.addShape(circle);
                    menu.addItem("circle" + circleCount++);
                } else if (shapeName.equals("Square")) {
                    double length = Double.parseDouble(data[1]);
                    Point position = new Point(Integer.parseInt(data[2]), Integer.parseInt(data[3]));
                    Color color = new Color(Integer.parseInt(data[4]));
                    Color fillColor;
                    if (!(data[5].equals("null"))) {
                        fillColor = new Color(Integer.parseInt(data[5]));
                    } else {
                        fillColor = null;
                    }
                    Square square = new Square(length);
                    square.setPosition(position);
                    square.setProperties(Map.of("length", length));
                    square.setColor(color);
                    square.setFillColor(fillColor);
                    paint.addShape(square);
                    menu.addItem("square" + squareCount++);
                } else if (shapeName.equals("Rectangle")) {
                    double length = Double.parseDouble(data[1]);
                    double width = Double.parseDouble(data[2]);
                    Point position = new Point(Integer.parseInt(data[3]), Integer.parseInt(data[4]));
                    Color color = new Color(Integer.parseInt(data[5]));
                    Color fillColor;
                    if (!(data[6].equals("null"))) {
                        fillColor = new Color(Integer.parseInt(data[6]));
                    } else {
                        fillColor = null;
                    }
                    Rectangle rectangle = new Rectangle(length, width);
                    rectangle.setPosition(position);
                    rectangle.setProperties(Map.of("length", length, "width", width));
                    rectangle.setColor(color);
                    rectangle.setFillColor(fillColor);
                    paint.addShape(rectangle);
                    menu.addItem("rectangle" + rectangleCount++);
                }
            }
            reader.close();
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error reading file \"" + filePath + "\"\nPlease try again later\nError: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void resizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeActionPerformed
        Shape[] shapes = paint.getShapes();
        if (shapes.length != 0) {
            int index = menu.getSelectedIndex();
            Shape shape = shapes[index];
            if (shape instanceof Circle) {
                new ResizeCircleWindow(paint, index).setVisible(true);
            } else if (shape instanceof Line) {
                new ResizeLineWindow(canvas, paint, index).setVisible(true);
            } else if (shape instanceof Square) {
                new ResizeSquareWindow(paint, index).setVisible(true);
            } else if (shape instanceof Rectangle) {
                new ResizeRectangleWindow(paint, index).setVisible(true);
            }
        }
        canvas.repaint();
    }//GEN-LAST:event_resizeActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel canvasPanel;
    private javax.swing.JButton circle;
    private javax.swing.JButton colorize;
    private javax.swing.JButton delete;
    private javax.swing.JButton line;
    private javax.swing.JButton load;
    private javax.swing.JComboBox<String> menu;
    private javax.swing.JButton move;
    private javax.swing.JButton rectangle;
    private javax.swing.JButton resize;
    private javax.swing.JButton save;
    private javax.swing.JLabel selectShapeLabel;
    private javax.swing.JButton square;
    // End of variables declaration//GEN-END:variables
}
